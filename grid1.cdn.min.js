import{Clock as t,PerspectiveCamera as e,Scene as i,WebGLRenderer as s,SRGBColorSpace as n,MathUtils as o,Vector2 as r,Color as a,MeshPhysicalMaterial as h,ShaderChunk as c,InstancedMesh as d,Vector3 as l,Object3D as m,FrontSide as g,PointLight as p,LatheGeometry as f,PCFSoftShadowMap as u,Raycaster as v,Plane as y}from"https://cdn.jsdelivr.net/npm/three@0.170.0/+esm";class w{#t;canvas;camera;cameraMinAspect;cameraMaxAspect;cameraFov;maxPixelRatio;minPixelRatio;scene;renderer;#e;size={width:0,height:0,wWidth:0,wHeight:0,ratio:0,pixelRatio:0};render=this.#i;onBeforeRender=()=>{};onAfterRender=()=>{};onAfterResize=()=>{};#s=!1;#n=!1;isDisposed=!1;#o;#r;#a;#h=new t;#c={elapsed:0,delta:0};#d;constructor(t){this.#t={...t},this.#l(),this.#m(),this.#g(),this.resize(),this.#p()}#l(){this.camera=new e,this.cameraFov=this.camera.fov}#m(){this.scene=new i}#g(){this.#t.canvas?this.canvas=this.#t.canvas:this.#t.id?this.canvas=document.getElementById(this.#t.id):console.error("Three: Missing canvas or id parameter"),this.canvas.style.display="block";const t={canvas:this.canvas,powerPreference:"high-performance",...this.#t.rendererOptions??{}};this.renderer=new s(t),this.renderer.outputColorSpace=n}#p(){this.#t.size instanceof Object||(window.addEventListener("resize",this.#f.bind(this)),"parent"===this.#t.size&&(this.#r=new ResizeObserver(this.#f.bind(this)),this.#r.observe(this.canvas.parentNode))),this.#o=new IntersectionObserver(this.#u.bind(this),{root:null,rootMargin:"0px",threshold:0}),this.#o.observe(this.canvas),document.addEventListener("visibilitychange",this.#v.bind(this))}#y(){window.removeEventListener("resize",this.#f.bind(this)),this.#r?.disconnect(),this.#o?.disconnect(),document.removeEventListener("visibilitychange",this.#v.bind(this))}#u(t){this.#s=t[0].isIntersecting,this.#s?this.#w():this.#z()}#v(t){this.#s&&(document.hidden?this.#z():this.#w())}#f(){this.#a&&clearTimeout(this.#a),this.#a=setTimeout(this.resize.bind(this),100)}resize(){let t,e;this.#t.size instanceof Object?(t=this.#t.size.width,e=this.#t.size.height):"parent"===this.#t.size&&this.canvas.parentNode?(t=this.canvas.parentNode.offsetWidth,e=this.canvas.parentNode.offsetHeight):(t=window.innerWidth,e=window.innerHeight),this.size.width=t,this.size.height=e,this.size.ratio=t/e,this.#x(),this.#R(),this.onAfterResize(this.size)}#x(){this.camera.aspect=this.size.width/this.size.height,this.camera.isPerspectiveCamera&&this.cameraFov&&(this.cameraMinAspect&&this.camera.aspect<this.cameraMinAspect?this.#P(this.cameraMinAspect):this.cameraMaxAspect&&this.camera.aspect>this.cameraMaxAspect?this.#P(this.cameraMaxAspect):this.camera.fov=this.cameraFov),this.camera.updateProjectionMatrix(),this.updateWorldSize()}#P(t){const e=Math.tan(o.degToRad(this.cameraFov/2))/(this.camera.aspect/t);this.camera.fov=2*o.radToDeg(Math.atan(e))}updateWorldSize(){if(this.camera.isPerspectiveCamera){const t=this.camera.fov*Math.PI/180;this.size.wHeight=2*Math.tan(t/2)*this.camera.position.length(),this.size.wWidth=this.size.wHeight*this.camera.aspect}else this.camera.isOrthographicCamera&&(this.size.wHeight=this.camera.top-this.camera.bottom,this.size.wWidth=this.camera.right-this.camera.left)}#R(){this.renderer.setSize(this.size.width,this.size.height),this.#e?.setSize(this.size.width,this.size.height);let t=window.devicePixelRatio;this.maxPixelRatio&&t>this.maxPixelRatio?t=this.maxPixelRatio:this.minPixelRatio&&t<this.minPixelRatio&&(t=this.minPixelRatio),this.renderer.setPixelRatio(t),this.size.pixelRatio=t}get postprocessing(){return this.#e}set postprocessing(t){this.#e=t,this.render=t.render.bind(t)}#w(){if(this.#n)return;console.log("Start rendering");const t=()=>{this.#d=requestAnimationFrame(t),this.#c.delta=this.#h.getDelta(),this.#c.elapsed+=this.#c.delta,this.onBeforeRender(this.#c),this.render(),this.onAfterRender(this.#c)};this.#n=!0,this.#h.start(),t()}#z(){this.#n&&(console.log("Stop rendering"),cancelAnimationFrame(this.#d),this.#n=!1,this.#h.stop())}#i(){this.renderer.render(this.scene,this.camera)}clear(){this.scene.traverse((t=>{t.isMesh&&"object"==typeof t.material&&(Object.keys(t.material).forEach((e=>{const i=t.material[e];null!==i&&"object"==typeof i&&"function"==typeof i.dispose&&i.dispose()})),t.material.dispose(),t.geometry.dispose())})),this.scene.clear()}dispose(){console.log("dispose"),this.#y(),this.#z(),this.clear(),this.#e?.dispose(),this.renderer.dispose(),this.isDisposed=!0}}const z=new Map,x=new r;let R=!1;function P(t){const e={position:new r,nPosition:new r,hover:!1,onEnter(){},onMove(){},onClick(){},onLeave(){},...t};return function(t,e){z.has(t)||(z.set(t,e),R||(document.body.addEventListener("pointermove",b),document.body.addEventListener("pointerleave",C),document.body.addEventListener("click",M),R=!0))}(t.domElement,e),e.dispose=()=>{var e;e=t.domElement,z.delete(e),0===z.size&&(document.body.removeEventListener("pointermove",b),document.body.removeEventListener("pointerleave",C),R=!1)},e}function b(t){x.x=t.clientX,x.y=t.clientY;for(const[t,e]of z){const i=t.getBoundingClientRect();L(i)?(A(e,i),e.hover||(e.hover=!0,e.onEnter(e)),e.onMove(e)):e.hover&&(e.hover=!1,e.onLeave(e))}}function M(t){x.x=t.clientX,x.y=t.clientY;for(const[t,e]of z){const i=t.getBoundingClientRect();A(e,i),L(i)&&e.onClick(e)}}function C(){for(const t of z.values())t.hover&&(t.hover=!1,t.onLeave(t))}function A(t,e){const{position:i,nPosition:s}=t;i.x=x.x-e.left,i.y=x.y-e.top,s.x=i.x/e.width*2-1,s.y=-i.y/e.height*2+1}function L(t){const{x:e,y:i}=x,{left:s,top:n,width:o,height:r}=t;return e>=s&&e<=s+o&&i>=n&&i<=n+r}class S extends h{constructor(t){super(t);this.uniforms={thicknessDistortion:{value:.1},thicknessAmbient:{value:0},thicknessAttenuation:{value:.1},thicknessPower:{value:2},thicknessScale:{value:10}},this.defines.USE_UV="",this.onBeforeCompile=t=>{Object.assign(t.uniforms,this.uniforms),t.fragmentShader="\n        uniform float thicknessPower;\n        uniform float thicknessScale;\n        uniform float thicknessDistortion;\n        uniform float thicknessAmbient;\n        uniform float thicknessAttenuation;\n      "+t.fragmentShader,t.fragmentShader=t.fragmentShader.replace("void main() {","\n        void RE_Direct_Scattering(const in IncidentLight directLight, const in vec2 uv, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, inout ReflectedLight reflectedLight) {\n          vec3 scatteringHalf = normalize(directLight.direction + (geometryNormal * thicknessDistortion));\n          float scatteringDot = pow(saturate(dot(geometryViewDir, -scatteringHalf)), thicknessPower) * thicknessScale;\n          vec3 scatteringIllu = (scatteringDot + thicknessAmbient) * vColor;\n          reflectedLight.directDiffuse += scatteringIllu * thicknessAttenuation * directLight.color;\n        }\n\n        void main() {\n      ");const e=c.lights_fragment_begin.replaceAll("RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );","\n          RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n          RE_Direct_Scattering(directLight, vUv, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, reflectedLight);\n        ");t.fragmentShader=t.fragmentShader.replace("#include <lights_fragment_begin>",e),this.onBeforeCompile2&&this.onBeforeCompile2(t)}}}const{randFloatSpread:I,smoothstep:k}=o,O={type:"hexagon",n:20,light1Color:16777215,light1Intensity:1e3,light1PositionZ:5,light2Color:16711680,light2Intensity:500,light2PositionZ:-20,colors:[255,2105376,16777215],materialParams:{metalness:.8,roughness:.5,clearcoat:1,clearcoatRoughness:.1},timeCoef:1,depthScale:1,tiltRotationX:.15,tiltRotationY:.15};class E extends d{#b;#c=0;#M;#C;pointerPosition=new l;tilt=new l;#A=new l;#L=new m;#S=new r;constructor(t,e){const i={...O,...e};let s;"triangle"===i.type?(s=3,i.width=100/(i.n/2+.5),i.height=Math.sin(Math.PI/3)*i.width,i.radius=.5*i.width/Math.cos(Math.PI/6),i.nx=i.n,i.ny=Math.floor(3*i.n/5)):"square"===i.type?(s=4,i.width=100/i.n,i.height=100/i.n,i.radius=.5*i.width,i.nx=i.n,i.ny=Math.floor(2*i.n)):(s=6,i.radius=50/i.n,i.width=2*i.radius,i.height=2*Math.tan(Math.PI/3)*i.radius,i.nx=i.n,i.ny=i.n);const n=function(t,e,i,s=0,n=0,o=6){const a=[];a.push(new r(e,-i/2));for(let t=0;t<o;t++){const h=e-s+Math.cos(t/(o-1)*Math.PI/2)*s,c=i/2-n+Math.sin(t/(o-1)*Math.PI/2)*n;a.push(new r(h,c))}a.push(new r(0,i/2));const h=new f(a,t);return h.translate(0,-i/2,0),h.rotateX(Math.PI/2),h}(s,i.radius,5*i.radius,.125*i.radius,.125*i.radius);super(n,new S({...i.materialParams,side:g}),i.nx*i.ny),this.#b=t,this.config=i,this.#M=this.#I(),this.#C=new Float32Array(this.count).fill(0).map((()=>I(2*Math.PI))),this.#k(),this.castShadow=!0,this.receiveShadow=!0,this.setColors(i.colors)}#k(){const t=new p(this.config.light1Color,this.config.light1Intensity);t.positionZ=this.config.light1PositionZ,t.castShadow=!0,t.shadow.mapSize.width=1024,t.shadow.mapSize.height=1024,this.light1=t,this.#b.scene.add(this.light1);const e=new p(this.config.light2Color,this.config.light2Intensity);e.positionZ=this.config.light2PositionZ,this.light2=e,this.#b.scene.add(this.light2)}#I(){return"triangle"===this.config.type?function({nx:t,ny:e,width:i,height:s,radius:n}){const o=i/2,r=s,a=-t/2*o+o/2,h=-e/2*r+r/2;return D({nx:t,ny:e},((t,e)=>({x:a+t*o,y:h+e*r+.5*(e%2?-1:1)*(s-n)+t%2*(e%2?1:-1)*(2*n-s),rotZ:(t+e%2)%2*Math.PI/3})))}(this.config):"square"===this.config.type?function({nx:t,ny:e,width:i,height:s}){const n=i,o=s/2,r=-t/2*n+n/4,a=-e/2*o+o/2;return D({nx:t,ny:e},((t,e)=>({x:r+t*n+e%2/2*n,y:a+e*o,rotZ:0})))}(this.config):function({nx:t,ny:e,radius:i}){const s=Math.cos(Math.PI/6)*i*2,n=1.5*i,o=-t/2*s+s/4,r=-e/2*n+n/2;return D({nx:t,ny:e},((t,e)=>({x:o+t*s+e%2/2*s,y:r+e*n,rotZ:0})))}(this.config)}#O(){for(let t=0;t<this.config.nx;t++)for(let e=0;e<this.config.ny;e++){const i=t*this.config.ny+e,s=this.#M[i],n=this.#S.set(s.x,s.y).multiplyScalar(this.scale.x).sub(this.pointerPosition).length(),o=1-k(n,0,20*this.config.radius);this.#L.position.x=s.x,this.#L.position.y=s.y,this.#L.position.z=.5*(Math.cos(this.#C[i]+this.#c)-1)*this.config.radius*this.config.depthScale*o,this.#L.rotation.z=s.rotZ,this.#L.updateMatrix(),this.setMatrixAt(i,this.#L.matrix)}this.instanceMatrix.needsUpdate=!0}setColors(t){if(Array.isArray(t)&&t.length>1){const e=function(t){let e,i;return s(t),{setColors:s,getColorAt:function(t,s=new a){const n=Math.max(0,Math.min(1,t))*(e.length-1),o=Math.floor(n),r=i[o];if(o>=e.length-1)return r.clone();const h=n-o,c=i[o+1];return s.r=r.r+h*(c.r-r.r),s.g=r.g+h*(c.g-r.g),s.b=r.b+h*(c.b-r.b),s}};function s(t){e=t,i=[],e.forEach((t=>{const e=new a(t);i.push(e)}))}}(t);for(let t=0;t<this.count;t++)this.setColorAt(t,e.getColorAt(Math.random()));this.instanceColor.needsUpdate=!0}}resize(){this.#b.size.ratio>1?(this.scale.x=this.#b.size.wWidth/100*1.4,this.scale.y=this.scale.x):(this.scale.y=this.#b.size.wHeight/100*1.4,this.scale.x=this.scale.y)}update(t){this.#c+=t.delta*this.config.timeCoef,this.light1.position.set(this.pointerPosition.x,this.pointerPosition.y,this.light1.positionZ),this.light2.position.set(this.pointerPosition.x,this.pointerPosition.y,this.light2.positionZ),this.#A.lerp(this.tilt,.1),this.rotation.set(this.#A.x*this.config.tiltRotationX,this.#A.y*this.config.tiltRotationY,0),this.#O()}}function D({nx:t,ny:e},i){const s=new Array(t*e).fill(0);for(let n=0;n<t;n++)for(let t=0;t<e;t++){s[n*e+t]=i(n,t)}return s}function F(t,e={}){const i=new w({canvas:t,size:"parent",rendererOptions:{antialias:!0}});i.cameraMaxAspect=5/3,i.camera.position.z=100,i.updateWorldSize(),i.renderer.shadowMap.enabled=!0,i.renderer.shadowMap.type=u;const s=new E(i,e);i.scene.add(s),s.resize();const n=new v,o=new y(new l(0,0,1),0),r=new l,a=P({domElement:t});return a.onMove=()=>{n.setFromCamera(a.nPosition,i.camera),i.camera.getWorldDirection(o.normal),n.ray.intersectPlane(o,r),s.tilt.set(-a.nPosition.y,a.nPosition.x,0)},a.onLeave=()=>{r.set(0,0,0),s.tilt.set(0,0,0)},i.onBeforeRender=t=>{s.pointerPosition.lerp(r,.1),s.update(t)},i.onAfterResize=()=>{s.resize()},{three:i,grid:s,dispose(){i.dispose()}}}export{F as default};
